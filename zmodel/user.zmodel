import "shop"
import "i18n"
import "config"
import "video"
import "crawl"
import "company"
import "balance"
import "auth"
// https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-prisma/prisma/custom.prisma


model User {
  id String @id @default(cuid())
  name String? @unique
  email String? @unique
  emailVerified DateTime? @map("email_verified")
  image String? // 头像
  accounts Account[]
  sessions Session[]

  @@map("users")

  // next auth 自定义
  phone String?
  role String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deletedAt DateTime?
  deleted Boolean @default(false)

  block Boolean @default(false) // 禁号

  // 邀请相关
  inviterId String? // 邀请人
  inviter User? @relation("InviteHistory", fields: [inviterId], references: [id])
  invitee User[] @relation("InviteHistory")

  // 基础信息相关


  // 其他关联

  currentCompanyId String?
  company Company? @relation('ActiveCompanyUser', fields: [currentCompanyId], references: [id])

  currentShopId String?
  shop Shop? @relation('ActiveShopUser', fields: [currentShopId], references: [id])

  companys Company[]
  companyMembers CompanyMember[]

  shops Shop[]
  producs Produce[]

  produceSpecifications ProduceSpecification[]
  freeExpressFeeRules FreeExpressFeeRule[]
  expressFeeRules ExpressFeeRule[]

  shopMembers ShopMember[]

  i18nValues I18nValue[]
  configValues ConfigValue[]

  loginLogs LoginLog[]
  balanceLogs BalanceLog[]

  creatorBalanceLogs BalanceLog[] @relation("BalanceLogCreator")

  crawlTasks CrawlTask[]

  videos Video[]
  videoOrders VideoOrder[]

  handleVideoOrders VideoOrder[] @relation("VideoTaskHandler")

  balance Balance[]

  roles UserRole[]
  permissions UserPermission[]

  creatorRoles Role[] @relation("CreatorRoles")
  creatorUserRoles UserRole[] @relation("CreatorUserRoles")
  creatorRolePermissions RolePermission[] @relation("CreatorRolePermissions")
  creatorUserPermissions UserPermission[] @relation("CreatorUserPermissions")
}

model Account {
  id String @id @default(cuid())
  userId String @map("user_id")
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique @map("session_token")
  userId String @map("user_id")
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


// 自定义内容

model LoginLog {
  day String
  userId String
  startAt DateTime @default(now())
  endAt DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([day, userId])
}
