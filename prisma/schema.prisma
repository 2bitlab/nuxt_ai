//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity","fullTextSearch"]
}

enum ShowStatus {
    OPEND
    DRAFT
    REVIEW
}

enum ShopMemberRole {
    OWNER
    ADMIN
    SALER
}

enum ProduceStatus {
    IN_STOCK
    DRAFT
    REVIEW
}

enum ProduceType {
    CARD
    COMBO
    PHYSICAL
}

enum LimitBuyType {
    DAY
    WEEK
    MONTH
    ONCE
}

enum CardProduceAccountStatus {
    IN_STOCK
    SOLD
}

enum FreeExpressFeeRuleType {
    ORDER_AMOUNT_LIMIT
    ORDER_FEE_LIMIT
    PRODUCE_AMOUNT_LIMIT
    PRODUCE_FEE_LIMIT
}

enum ExpressFeeRuleTyle {
    AMOUNT
    WEIGHT
}

enum CurrencyType {
    AUD
    CAD
    CHF
    DKK
    EUR
    GBP
    HKD
    JPY
    KRW
    KZT
    MOP
    MYR
    NOK
    NZD
    PKR
    RUB
    SEK
    SGD
    THB
    USD
    ZAR
    PHP
    CNY
}

enum CompanyStatus {
    VERIFIED
    WAIT_CERTIFIED
    REVIEW
    LOGGED_OUT
}

enum CompanyMemberRole {
    OWNER
    ADMIN
    MEMBER
}

enum ConfigValueKey {
    TENCENT_COS_SECRET
    TENCENT_COS_UPLOAD
    TENCENT_VECTOR_DB
    OPENAI_API_KEY
}

enum VideoOrderStatus {
    WAIT_HANDEL
    PROCESSING
    WAIT_CONFIRM
    DONE
    CANCEL
}

enum PageStatus {
    IS_404
    IS_500
    IS_200
    IS_WATING
}

enum Permission {
    TOP_UP
    SUPER_ADMIN
}

model User {
    id String @id() @default(cuid())
    name String? @unique()
    email String? @unique()
    emailVerified DateTime?
    image String?
    phone String?
    role String?
    accounts Account[]
    sessions Session[]
    password String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    deleted Boolean @default(false)
    block Boolean @default(false)
    inviterId String?
    inviter User? @relation("InviteHistory", fields: [inviterId], references: [id])
    invitee User[] @relation("InviteHistory")
    currentCompanyId String?
    company Company? @relation("ActiveCompanyUser", fields: [currentCompanyId], references: [id])
    currentShopId String?
    shop Shop? @relation("ActiveShopUser", fields: [currentShopId], references: [id])
    companys Company[]
    companyMembers CompanyMember[]
    shops Shop[]
    producs Produce[]
    produceSpecifications ProduceSpecification[]
    freeExpressFeeRules FreeExpressFeeRule[]
    expressFeeRules ExpressFeeRule[]
    shopMembers ShopMember[]
    i18nValues I18nValue[]
    configValues ConfigValue[]
    loginLogs LoginLog[]
    balanceLogs BalanceLog[]
    creatorBalanceLogs BalanceLog[] @relation("BalanceLogCreator")
    crawlTasks CrawlTask[]
    videos Video[]
    videoOrders VideoOrder[]
    handleVideoOrders VideoOrder[] @relation("VideoTaskHandler")
    balnace Balance[]
    roles UserRole[]
    permissions UserPermission[]
    creatorRoles Role[] @relation("CreatorRoles")
    creatorUserRoles UserRole[] @relation("CreatorUserRoles")
    creatorRolePermissions RolePermission[] @relation("CreatorRolePermissions")
    creatorUserPermissions UserPermission[] @relation("CreatorUserPermissions")
}

model Account {
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@id([identifier, token])
}

model LoginLog {
    day String
    userId String
    startAt DateTime @default(now())
    endAt DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([day, userId])
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model Shop {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String
    logo String?
    status ShowStatus @default(DRAFT)
    companyId String
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    producs Produce[]
    shopMember ShopMember[]
    activeUsers User[] @relation("ActiveShopUser")
}

model ShopMember {
    id String @id() @default(cuid())
    role ShopMemberRole @default(SALER)
    shopId String
    shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([shopId, userId])
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model ProduceSpecification {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String
    values ProduceSpecificationValue[]
    producId String
    produc Produce @relation(fields: [producId], references: [id], onDelete: Cascade)
}

model ProduceSpecificationValue {
    id String @id() @default(cuid())
    value String
    iamge String?
    produceSpecificationId String
    produceSpecification ProduceSpecification @relation(fields: [produceSpecificationId], references: [id], onDelete: Cascade)
    producePrices ProducePrice[]
    produceSpecificationValuePrice ProduceSpecificationValuePrice[]
    deletedAt DateTime?
    deleted Boolean @default(false)
}

model ProducePrice {
    id String @id() @default(cuid())
    goods_no String?
    currency CurrencyType @default(CNY)
    price Decimal @default(0)
    cost Decimal @default(0)
    weight Int @default(0)
    stock Int @default(0)
    reduceStock Int
    saled Int @default(0)
    saledAmount Decimal @default(0)
    deletedAt DateTime?
    deleted Boolean @default(false)
    producId String
    produc Produce @relation(fields: [producId], references: [id], onDelete: Cascade)
    produceSpecificationValues ProduceSpecificationValue[]
    produceSpecificationValuePrice ProduceSpecificationValuePrice[]
}

model ProduceSpecificationValuePrice {
    producePriceId String
    producePrice ProducePrice @relation(fields: [producePriceId], references: [id])
    produceSpecificationValueId String
    produceSpecificationValue ProduceSpecificationValue @relation(fields: [produceSpecificationValueId], references: [id])

    @@id([producePriceId, produceSpecificationValueId])
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model Produce {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String
    status ProduceStatus @default(DRAFT)
    linePrice Decimal
    tags String?
    visits Int @default(0)
    saled Int @default(0)
    saledAmount Decimal @default(0)
    isLimitBuy Boolean @default(false)
    limitBuyType LimitBuyType?
    limitBuyValue Int?
    minBuyValue Int?
    shopId String
    shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
    produceSpecification ProduceSpecification[]
    producePrice ProducePrice[]
    type ProduceType @default(PHYSICAL)
    cardProduce CardProduce?
    comboProduce ComboProduce?
    physicalProduce PhysicalProduce?
}

model CardProduceAccount {
    id String @id() @default(cuid())
    value String
    status CardProduceAccountStatus @default(IN_STOCK)
    cardProduceId String
    cardProduce CardProduce @relation(fields: [cardProduceId], references: [id], onDelete: Cascade)
}

model CardProduce {
    id String @id() @default(cuid())
    produceId String @unique()
    produce Produce @relation(fields: [produceId], references: [id], onDelete: Cascade)
    cardProduceAccounts CardProduceAccount[]
}

model ComboProduce {
    id String @id() @default(cuid())
    produceId String @unique()
    produce Produce @relation(fields: [produceId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model FreeExpressFeeRule {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String
    type FreeExpressFeeRuleType @default(ORDER_FEE_LIMIT)
    freeExpressFeeRuleCitys FreeExpressFeeRuleCity[]
    physicalProduces PhysicalProduce[]
    isDef Boolean
}

model FreeExpressFeeRuleCity {
    id String @id() @default(cuid())
    citys String
    limit Int
    freeExpressFeeRuleId String
    freeExpressFeeRule FreeExpressFeeRule @relation(fields: [freeExpressFeeRuleId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model ExpressFeeRule {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String
    type ExpressFeeRuleTyle @default(AMOUNT)
    isDef Boolean
    expressFeeRuleCitys ExpressFeeRuleCity[]
    physicalProduces PhysicalProduce[]
}

model ExpressFeeRuleCity {
    id String @id() @default(cuid())
    citys String
    firstLimit Int
    firstFee Decimal
    step Int
    stepFee Decimal
    expressFeeRuleId String
    expressFeeRule ExpressFeeRule @relation(fields: [expressFeeRuleId], references: [id], onDelete: Cascade)
}

model PhysicalProduce {
    id String @id() @default(cuid())
    produceId String @unique()
    produce Produce @relation(fields: [produceId], references: [id], onDelete: Cascade)
    expressFee Decimal
    isFreeExpressFee Boolean
    freeExpressFeeRuleId String
    freeExpressFeeRule FreeExpressFeeRule @relation(fields: [freeExpressFeeRuleId], references: [id], onDelete: Cascade)
    expressFeeRuleId String
    expressFeeRule ExpressFeeRule @relation(fields: [expressFeeRuleId], references: [id], onDelete: Cascade)
}

model CompanyMember {
    id String @id() @default(cuid())
    role CompanyMemberRole @default(MEMBER)
    companyId String
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([companyId, userId])
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model Company {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    name String @unique()
    logo String?
    status CompanyStatus @default(WAIT_CERTIFIED)
    companyMembers CompanyMember[]
    shops Shop[]
    activeUsers User[] @relation("ActiveCompanyUser")
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model I18nValue {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    key String
    value String
    lang String
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model ConfigValue {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    key ConfigValueKey
    value Json
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model Video {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    url String
    title String
    summary String @db.Text()
    coverUrl String
    mulQualityVideos Json
    publishedAt DateTime @default(now())
    videoTypeId String
    videoType VideoType @relation(fields: [videoTypeId], references: [id], onDelete: Cascade)
    videoTags VideoTag[]
    videoSetId String?
    videoSet VideoSet? @relation(fields: [videoSetId], references: [id])
    price Decimal @default(0)
    audioUrl String?
    copywritingUrl String?
    copywriting String?
    videoOrders VideoOrder[]
}

model VideoType {
    id String @id() @default(cuid())
    label String
    parentId String?
    parent VideoType? @relation("VideoTypeRelation", fields: [parentId], references: [id])
    children VideoType[] @relation("VideoTypeRelation")
    videos Video[]
}

model VideoTag {
    id String @id() @default(cuid())
    label String @unique()
    videos Video[]
}

model VideoSet {
    id String @id() @default(cuid())
    label String
    videos Video[]
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model VideoOrder {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    videoId String
    video Video @relation(fields: [videoId], references: [id])
    handlerId String?
    handler User? @relation("VideoTaskHandler", fields: [handlerId], references: [id])
    status VideoOrderStatus @default(WAIT_HANDEL)
    price Decimal @default(0)
    balanceLogId String @unique()
    balanceLog BalanceLog @relation(fields: [balanceLogId], references: [id])
}

model Balance {
    id String @id() @default(cuid())
    availableBalance Decimal @default(0)
    lockedBalance Decimal @default(0)
    withdrawableBalance Decimal @default(0)
    nonWithdrawableBalance Decimal @default(0)
    withdrawLockedBalance Decimal @default(0)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
}

model BalanceLog {
    id String @id() @default(cuid())
    availableBalance Decimal @default(0)
    lockedBalance Decimal @default(0)
    withdrawableBalance Decimal @default(0)
    nonWithdrawableBalance Decimal @default(0)
    withdrawLockedBalance Decimal @default(0)
    availableBalanceChange Decimal @default(0)
    lockedBalanceChange Decimal @default(0)
    withdrawableBalanceChange Decimal @default(0)
    nonWithdrawableBalanceChange Decimal @default(0)
    withdrawLockedBalanceChange Decimal @default(0)
    availableBalanceBefore Decimal @default(0)
    lockedBalanceBefore Decimal @default(0)
    withdrawableBalanceBefore Decimal @default(0)
    nonWithdrawableBalanceBefore Decimal @default(0)
    withdrawLockedBalanceBefore Decimal @default(0)
    remark String
    log Json?
    createdAt DateTime @default(now())
    creatorId String?
    creator User? @relation("BalanceLogCreator", fields: [creatorId], references: [id])
    preBalanceLogId String?
    preBalanceLog BalanceLog? @relation("BalanceLogHistory", fields: [preBalanceLogId], references: [id])
    balanceLogs BalanceLog[] @relation("BalanceLogHistory")
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    videoOrders VideoOrder[]
}

model Site {
    id String @id() @default(cuid())
    title String?
    host String @unique()
    keywords String?
    description String?
    icon String?
    thumbnail String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    pages Page[]
    crawlTasks CrawlTask[]
}

model Page {
    id String @id() @default(cuid())
    url String @unique()
    content String? @db.MediumText()
    contentSize Int @default(0)
    cleanHtml String? @db.MediumText()
    cleanHtmlSize Int @default(0)
    isHost Boolean @default(false)
    status PageStatus @default(IS_WATING)
    parentId String?
    parent Page? @relation("PageRelation", fields: [parentId], references: [id])
    children Page[] @relation("PageRelation")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    siteId String
    site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth() == creator)
/// @@allow('read', auth() != null && published)
model CrawlTask {
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    creator User? @relation(fields: [creatorId], references: [id])
    creatorId String?
    deleted Boolean @default(false)
    published Boolean @default(false)
    siteId String
    site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Role {
    id String @id() @default(cuid())
    name String @unique()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    creator User @relation("CreatorRoles", fields: [creatorId], references: [id])
    creatorId String
    users UserRole[]
    permissions RolePermission[]
}

model UserRole {
    id String @id() @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId String
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    creator User @relation("CreatorUserRoles", fields: [creatorId], references: [id])
    creatorId String

    @@unique([roleId, userId])
}

model RolePermission {
    id String @id() @default(cuid())
    roleId String
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission Permission
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    creator User @relation("CreatorRolePermissions", fields: [creatorId], references: [id])
    creatorId String

    @@unique([roleId, permission])
}

model UserPermission {
    id String @id() @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    permission Permission
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    creator User @relation("CreatorUserPermissions", fields: [creatorId], references: [id])
    creatorId String

    @@unique([userId, permission])
}